library(tidyverse)
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
head(diamonds)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
head(diamonds)
library(tidyverse)
library(tidyverse)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
head(diamonds)
head(diamonds)
knitr::kable(head(diamonds), caption = "a knitr kable")
install.packages("knitr")
knitr::kable(head(diamonds), caption = "a knitr kable")
install.packages("knitr")
diamonds %>%
filter(cut %in% c("Ideal", "Premium", "Very Good")) %>%
group_by(cut) %>%
ggplot(aes(cut, price)) +
geom_boxplot() +
labs(title = "Average Diamond Price ($) by Quality of Cut")
diamonds %>%
filter(cut %in% c("Ideal", "Premium", "Very Good")) %>%
group_by(cut) %>%
ggplot(aes(carat, price, color = cut)) +
geom_smooth() +
labs(title = "Diamond Price by Cut and Weight", subtitle = "The Bigger the Diamond, the Lower the Quality")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
library(tidyverse)
library(palerpenguins)
library(palmerpenguins)
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
library(palmerpenguins)
#> # A tibble: 344 × 8
4+4
b <-4
4+4
setwd("C:\Users\Antonio Felix\OneDrive\Documents\GitHub\StatsI_Fall2023\datasets")
expenditure <- read.table("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2023/main/datasets/expenditure.txt", header=T)
View(expenditure)
df_not_tidy <- read.csv("datasets/expanditure.csv")
df_not_tidy <- read.csv("datasets/expanditure.csv")
df_not_tidy <- read.csv("datasets/expanditure.csv")
setwd("C:\Users\Antonio Felix\OneDrive\Documents\GitHub\StatsI_Fall2023\problemSets\PS01\myasnwers")
getwd()
View(expenditure.csv)
View(expenditure)
library(readr)
expenditure <- read_csv("GitHub/StatsI_Fall2023/problemSets/PS01/my_answers/expenditure.csv")
View(expenditure)
View(expenditure)
ggplot(Expenditure,mapping = aes(x = Income, y = Spending)) +
geom_point(mapping = aes(color = Region, shape= Region))+
geom_smooth(method = "lm")+
scale_color_manual(values = c("red","blue","green","brown"))+
scale_shape_manual(values = c("circle","triangle","square","diamond"))
Expenditure$Region <- as.factor(Expenditure$Region)
Expenditure$Region <- as.factor(Expenditure$Region)
library(readr)
expenditure <- read_delim("GitHub/StatsI_Fall2023/problemSets/PS01/my_answers/expenditure.csv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(expenditure)
#Structure of my data, what type of variables I have, character, numeric, list, etc.
str(Expenditure)
Expenditure <- read.csv("C:/Users/Antonio Felix/OneDrive/Documents/GitHub/StatsI_Fall2023/problemSets/PS01/my_answers/expenditure.csv", header=T)
View(Expenditure)
library(readr)
Expenditure <- read_delim("GitHub/StatsI_Fall2023/problemSets/PS01/my_answers/expenditure.csv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(Expenditure)
#Structure of my data, what type of variables I have, character, numeric, list, etc.
str(Expenditure)
Expenditure <- read.csv("C:/Users/Antonio Felix/OneDrive/Documents/GitHub/StatsI_Fall2023/problemSets/PS01/my_answers/expenditure.csv", header=T)
#Structure of my data, what type of variables I have, character, numeric, list, etc.
str(Expenditure)
glimpse(Expenditure)
Expenditure <- read.csv("C:/Users/Antonio Felix/OneDrive/Documents/GitHub/StatsI_Fall2023/problemSets/PS01/my_answers/expenditure.csv", header=T)
glimpse(Expenditure)
# Number of observations and number of variables
dim(Expenditure)
length(Expenditure)
View(Expenditure)
library(readr)
Expenditure <- read_delim("GitHub/StatsI_Fall2023/problemSets/PS01/my_answers/expenditure.csv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(Expenditure)
#Structure of my data, what type of variables I have, character, numeric, list, etc.
str(Expenditure)
glimpse(Expenditure)
# Number of observations and number of variables
dim(Expenditure)
length(Expenditure)
View(Expenditure)
head(Expenditure)
library(tidyverse)
head(Expenditure)
glimpse(Expenditure)
head(Expenditure)
colnames(Expenditure)[colnames(Expenditure)=="Y"]<-"Spending"
colnames(Expenditure)[colnames(Expenditure)=="X1"]<-"Income"
colnames(Expenditure)[colnames(Expenditure)=="X2"]<-"Residents"
colnames(Expenditure)[colnames(Expenditure)=="X3"]<-"Urban"
head(Expenditure)
summary(Expenditure$Spending)
summary(Expenditure$Income)
summary(Expenditure$Residents)
summary(Expenditure$Urban)
summary(Expenditure$Region)
#Answer of option A
# Relationship among Y, X1, X2, and X3
plot(Expenditure$Residents,Expenditure$Spending)
plot(Expenditure$Residents, Expenditure$Spending)
cor(Expenditure$Residents,Expenditure$Spending)
hist(Expenditure$Spending) # Distribution
mean(Expenditure$Spending) # Central tendency, mean
var(Expenditure$Spending) # Variability, variance
sd(Expenditure$Spending) # Variability, standard deviation
sd(Expenditure$Spending)/sqrt(length((Expenditure$Spending)))
hist(Expenditure$Residents)
mean(Expenditure$Residents)
var(Expenditure$Residents)
sd(Expenditure$Residents)
sd(Expenditure$Residents)/sqrt(length((Expenditure$Residents)))
cor(Expenditure$Residents,Expenditure$Spending)
plot(Expenditure$Residents,Expenditure$Spending)
hist(Expenditure$Residents)
#Y & x2 = Expenditure/Spending & Urban areas
hist(Expenditure$Urban)
cor(Expenditure$Urban, Expenditure$Spending)
plot(Expenditure$Urban, Expenditure$Spending)
#X1 & X3 = Income/People on Urban areas
cor(Expenditure$Urban, Expenditure$Income)
plot(Expenditure$Urban, Expenditure$Income)
plot(Expenditure$Income, Expenditure$Urban)
plot(Expenditure$Urban, Expenditure$Income)
#Y & x2 = Expenditure/Spending & Urban areas
hist(Expenditure$Urban)
plot(Expenditure$Urban, Expenditure$Income)
#X2 & X3 = Residents "Financially insecure" /People on Urban areas
cor(Expenditure$Urban, Expenditure$Income)
plot(Expenditure$Urban, Expenditure$Income)
#X2 & X3 = Residents "Financially insecure" /People on Urban areas
cor(Expenditure$Residents, Expenditure$Urban)
plot(Expenditure$Residents, Expenditure$Urban)
cor(Expenditure$Spending,Expenditure$Region)
plot(Expenditure$Spending,Expenditure$Region)
plot(Expenditure$Region,Expenditure$Spending)
ggplot(Expenditure,mapping = aes(y = Spending, x = Region))+geom_point()
plot(Expenditure$Region,Expenditure$Spending)
ggplot(Expenditure,mapping = aes(y = Spending, x = Region))+geom_point()
sum(Expenditure$Spending)
plot(Expenditure$Region,Expenditure$Spending)
ggplot(Expenditure,mapping = aes(y = Spending, x = Region))+geom_point()
cor(Expenditure$Spending,Expenditure$Region)
cor(Expenditure$Spending,Expenditure$Income)
plot(Expenditure$Income,Expenditure$Spending)
ggplot(Expenditure,mapping = aes(x = Income, y = Spending)) +
geom_point(mapping = aes(color = Region, shape= Region))+
geom_smooth(method = "lm")+
scale_color_manual(values = c("red","blue","green","brown"))+
scale_shape_manual(values = c("circle","triangle","square","diamond"))
Expenditure$Region <- as.factor(Expenditure$Region)
ggplot(Expenditure,mapping = aes(x = Income, y = Spending)) +
geom_point(mapping = aes(color = Region, shape= Region))+
geom_smooth(method = "lm")+
scale_color_manual(values = c("red","blue","green","brown"))+
scale_shape_manual(values = c("circle","triangle","square","diamond"))
t.test(y, mu = 100)
mean(y)+1.90*(sd(y)/5)
x <- c(14,6,7)
y <- c(7,7,1)
# Fastest way on R
r <- cor(x,y)
n <- length(x)
#test statistic = t = r*sqrt(n-2/sqrt(1-r^2))
t_stat <- (r*sqrt(n-2)/sqrt(1-r^2))
print(t_stat)
r <- cor(x,y)
print(r)
#test statistic = t = r*sqrt(n-2/sqrt(1-r^2))
t_stat <- (r*sqrt(n-2)/sqrt(1-r^2))
#∑XY represents the sum of the products of X and Y.
∑XY <- sum(x * y)
#∑XY represents the sum of the products of X and Y.
SumXY <- sum(x*y)
Print(SumXY)
print(SumXY)
SumX <- sum(x)
print(SumX)
# rxy <- (n)(∑XY)-(∑X)(∑Y)/sqrt[(n)(∑X2)-(∑X)^2)][(n)(∑Y2)-(∑Y)^2]
# As I can't used the symbol ∑ in R I habe to change it to sum
rxy <- (n)(SumXY)-(SumX)(SumY)/sqrt[(n)(SumX2)-(SumX)^2)][(n)(SumY2)-(SumY)^2]
SumY <- sum(y)
print(SumY)
print(n)
SumX2 <- sum(x^2)
print(SumX2)
SumY2 <- sum(y^2)
print(SumY2)
# rxy <- (n)(∑XY)-(∑X)(∑Y)/sqrt[(n)(∑X2)-(∑X)^2)][(n)(∑Y2)-(∑Y)^2]
# As I can't used the symbol ∑ in R I habe to change it to sum
rxy <- (n)(SumXY)-(SumX)(SumY)/sqrt[(n)(SumX2)-(SumX)^2)][(n)(SumY2)-(SumY)^2]
# rxy <- (n)(∑XY)-(∑X)(∑Y)/sqrt[(n)(∑X2)-(∑X)^2)][(n)(∑Y2)-(∑Y)^2]
# As I can't used the symbol ∑ in R I habe to change it to sum
rxy <- (n)(SumXY)-(SumX)(SumY)/sqrt[(n)(SumX2)-(SumX)^2)][(n)(SumY2)-(SumY)^2]
# rxy <- (n)(∑XY)-(∑X)(∑Y)/sqrt[(n)(∑X2)-(∑X)^2)][(n)(∑Y2)-(∑Y)^2]
# As I can't used the symbol ∑ in R I habe to change it to sum
rxy <- n*SumXY-SumX*SumY/sqrt((n*SumX2-SumX^2)*(n*SumY2-SumY^2))
print(rxy)
# rxy <- (n)(∑XY)-(∑X)(∑Y)/sqrt[(n)(∑X2)-(∑X)^2)][(n)(∑Y2)-(∑Y)^2]
# As I can't used the symbol ∑ in R I habe to change it to sum
rxy <- (n*SumXY-SumX*SumY) / sqrt((n*SumX2-SumX^2)*(n*SumY2-SumY^2))
print(rxy)
rxy <- (n*SumXY-SumX*SumY) / sqrt((n*SumX2-SumX^2)*(n*SumY2-SumY^2))
print(rxy)
x_bar <- mean(x)
print(x_bar)
rxy_slides <- (SumXY)-(n)(XYbar) / sqrt[(SumX^2)-(n)(Xbar^2)sqrt(SumY^2)-(n)(Ybar^2)
x_bar <- mean(x)
print(x_bar)
y_bar <- mean(y)
print(y_bar)
XY_bar <- X_bar*Y_bar
XY_bar <- X_bar * Y_bar
X_bar <- mean(x)
print(X_bar)
X_bar <- mean(x)
print(X_bar)
Y_bar <- mean(y)
print(Y_bar)
XY_bar <- X_bar * Y_bar
print(XY_bar)
XY_bar <- mean(x*y)
print(XY_bar)
rxy_slides <- (SumXY)-(n)(XYbar) / sqrt[(SumX^2)-(n)(Xbar^2)sqrt(SumY^2)-(n)(Ybar^2)
rxy_slides <- (SumXY - n * XY_bar / sqrt((SumX^2 - n * X_bar^2)
* SumY^2 - n * Y_bar^2))
print(rxy_slides)
t_stat <- (r*sqrt(n-2)/sqrt(1-r^2))
print(t_stat)
print(Political_Science)
t_stat <- (r*sqrt(n-2)/sqrt(1-r^2))
print(t_stat)
df <- n-2
p_value <- 2*(1-pt(abs(t_stat),df))
print(df)
print(p_value)
Political_Science <- data.frame (Class = c("Upper class", "Lower class"),
"Not Stopped" = c(14, 6), "Bribe requested" = c(7, 7),
"Stopped/given warning" = c(1, 0)
)
print(Political_Science)
residuals <- Political_Science[, -1]  # Exclude the Class column
residuals <- as.data.table(residuals)
residuals_table <- data.frame(
Class = Political_Science$Class,
"Not Stopped" = round(residuals[, 1], 2),
"Bribe requested" = round(residuals[, 2], 2),
"Stopped/given warning" = round(residuals[, 3], 2)
)
print(Political_Science)
print(residuals_table)
Political_Science <- data.frame (Class = c("Upper class", "Lower class"),
"Not Stopped" = c(14, 6), "Bribe requested" = c(7, 7),
"Stopped/given warning" = c(1, 0)
print(Political_Science)
Political_Science <- data.frame (Class = c("Upper class", "Lower class"),
"Not Stopped" = c(14, 6), "Bribe requested" = c(7, 7),
"Stopped/given warning" = c(1, 0)
Political_Science <- data.frame (Class = c("Upper class", "Lower class"),
Political_Science <- data.frame (Class = c("Upper class", "Lower class"),
"Not Stopped" = c(14, 6), "Bribe requested" = c(7, 7),
"Stopped/given warning" = c(1, 0))
print(Political_Science)
residuals <- Political_Science[, -1]  # Exclude the Class column
residuals <- as.data.table(residuals)
library(data.table)
library(data.table)
Political_Science <- data.frame (Class = c("Upper class", "Lower class"),
"Not Stopped" = c(14, 6), "Bribe requested" = c(7, 7),
"Stopped/given warning" = c(1, 0))
print(Political_Science)
residuals <- Political_Science[, -1]  # Exclude the Class column
residuals <- as.data.table(residuals)
residuals <- residuals - mean(unlist(residuals))
residuals <- residuals / sd(unlist(residuals))
residuals_table <- data.frame(
Class = Political_Science$Class,
"Not Stopped" = round(residuals[, 1], 2),
"Bribe requested" = round(residuals[, 2], 2),
"Stopped/given warning" = round(residuals[, 3], 2)
)
print(Political_Science)
print(residuals_table)
#Residuals
residuals <-(resid(lm_model))
lm_model <- lm(y ~ x)
#Residuals
residuals <-(resid(lm_model))
#Standard error of residuals
standard_error_residuals <- sd(residuals)
print(standardized_residuals)
standardized_residuals <- residuals / standard_error_residuals
print(standardized_residuals)
url > - https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv
data <- fread(url)
url > - https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv
url < - https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv
url < - https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv
url < - https:\\raw.githubusercontent.com\kosukeimai\qss\master\PREDICTION\women.csv
url < - https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv
url < - https:'//'raw.githubusercontent.com'/'kosukeimai'/'qss'/'master'/'PREDICTION'/'women.csv
url < - https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv
url <- https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv
url <- "https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv"
data <- fread(url)
#Notes: fread = "fast read" / url has to be on quotation marks
view(data)
#Notes: fread = "fast read" / url has to be on quotation marks
print(data)
head(data)
View(data)
# Number of observations and number of variables
dim(data)
length(data)
x <- c(14,6,7)
y <- c(7,7,1)
#Answer Question 1 (C)
library(data.table)
url <- "https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv"
data <- fread(url)
url <- "https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv"
data <- fread(url)
#Notes: fread = "fast read" / url has to be on quotation marks
print(data)
plot(data.GP)
library(tidyverse)
Prediction <- data
head(Prediction)
summary(Prediction$GP)
sumary(Prediction$irrigation)
summary(Prediction$irrigation)
summary(Prediction$water)
hist(Prediction$GP)
hist(Prediction$irrigation)
hist(Prediction$water)
hist(GP$irrigation)
hist(Preiction$GP$Prediction$irrigation)
hist(Preiction$GP,$Prediction$irrigation)
plot(Preiction$GP,$Prediction$irrigation)
plot(Preiction$GP,Prediction$irrigation)
plot(Prediction$GP,Prediction$irrigation)
plot(Prediction$irrigation,Prediction$GP)
plot(Prediction$GP,Prediction$irrigation)
plot(Prediction$GP,Prediction$water)
Regression model <- lm(Prediction$GP,Prediction$irrigation)
Regression_model <- lm(Prediction$GP,Prediction$irrigation)
Regression_model <- lm(water ~ GP, data = data)
summary(Regression_model)
Regression_model <- lm(water ~ reserved, data = data)
summary(Regression_model)
hist(Prediction$reserved)
plot(Prediction$GP,Prediction$irrigation)
plot(Prediction$reserved,Prediction$water)
Regression_model <- lm(irrigation ~ reserved, data = data)
summary(Regression_model)
Regression_model <- lm(water ~ reserved, data = data)
summary(Regression_model)
plot(Prediction$reserved,Prediction$water)
Regression_model <- lm(irrigation ~ reserved, data = data)
summary(Regression_model)
Regression_model <- lm(water ~ reserved, data = data)
summary(Regression_model)
# Expected frequencies under the assumption of independence
expected_counts <- chisq.test(observed_counts)$expected
x <- c(14,6,7)
y <- c(7,7,1)
# Expected frequencies under the assumption of independence
expected_counts <- chisq.test(observed_counts)$expected
data <- fread(url)
url <- "https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv"
data <- fread(url)
# Set working directory
setwd("C:\Users\Antonio Felix\OneDrive\Documents\GitHub\StatsI_Fall2023\tutorials\05")
# Set working directory
setwd("C:/Users/Antonio Felix/OneDrive/Documents/GitHub/StatsI_Fall2023/tutorials/05")
install.packages("wbstats")
library(wbstats)}
if(!require(wbstats)){
install.packages("wbstats")
library(wbstats)}
install.packages("wbstats")
install.packages("wbstats")
library(tidyverse)}
install.packages("ggplot2")
install.packages("stargazer")
wb <- wb(country=c("AF","BRA","ITA","NGA","SWE","UGA"),
indicator=c("NY.GDP.PCAP.CD", # GDP per capita (current US$)
"SP.POP.TOTL", # Population, total
"SE.SEC.ENRR", #  School enrollment, secondary (% gross)
"SH.DYN.MORT"), # Mortality rate, under-5 (per 1,000 live births)
startdate = 2000, enddate = 2020)
wb <- wb(country=c("AF","BRA","ITA","NGA","SWE","UGA"),
indicator=c("NY.GDP.PCAP.CD", # GDP per capita (current US$)
"SP.POP.TOTL", # Population, total
"SE.SEC.ENRR", #  School enrollment, secondary (% gross)
"SH.DYN.MORT"), # Mortality rate, under-5 (per 1,000 live births)
startdate = 2000, enddate = 2020)
View(wb)
wb_re <- reshape(wb[, c("country","iso3c","date","indicatorID","value")], # df
timevar = "indicatorID", # New columns
idvar = c("country","date","iso3c"), # Identifiers for rows
direction = "wide")
# Load Quality of Government data
qog <- read_csv("https://www.qogdata.pol.gu.se/data/qog_bas_ts_jan23.csv")
if(!require(wbstats)){
install.packages("wbstats")
library(wbstats)}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)}
if(!require(stargazer)){
install.packages("stargazer")
library(stargazer)}
# Load Quality of Government data
qog <- read_csv("https://www.qogdata.pol.gu.se/data/qog_bas_ts_jan23.csv")
df <- merge(wb_re, # Left df
qog[, c("ccodealp","year","bmr_dem")], # Right df
by.x=c("date","iso3c"), # Merge variables in left
by.y=c("year","ccodealp"), # Merge variables in right
all.x=TRUE, # Merge operation, only keep left
sort=FALSE) # Do not sort observations
names(df)
names(df)[4] <- "gdp_per_cap"
names(df)[5] <- "pop_size"
names(df)[6] <- "sec_enrol"
names(df)[7] <- "mort"
names(df)[8] <- "democracy"
View(df)
# Save df
write.csv(df, "datasets/df_income_mortality.csv")
